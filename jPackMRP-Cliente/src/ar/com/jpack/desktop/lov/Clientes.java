/*
 * Clientes.java
 *
 * Created on 31 de julio de 2008, 14:10
 */
package ar.com.jpack.desktop.lov;

import ar.com.jpack.desktop.DesktopApp;
import ar.com.jpack.desktop.DesktopView;
import ar.com.jpack.transferencia.ClientesT;
import ar.com.jpack.helpers.LOVHelper;
import java.beans.PropertyChangeListener;
import java.beans.PropertyChangeSupport;
import java.util.ArrayList;
import java.util.HashMap;
import javax.swing.JOptionPane;
import javax.swing.ListSelectionModel;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import org.jdesktop.application.Action;
import org.jdesktop.application.Task;
import org.jdesktop.beansbinding.Binding;

/**
 *
 * @author  jmhanun
 */
public class Clientes extends javax.swing.JDialog {

    /** Creates new form Clientes */
    public Clientes(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        clientesTable.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        clientesTable.getSelectionModel().addListSelectionListener(
                new ListSelectionListener() {

                    public void valueChanged(ListSelectionEvent e) {
                        aceptarButton.setEnabled(clientesTable.getSelectedRow() != -1);
                    }
                });
        getRootPane().setDefaultButton(buscarButton);

    }
    protected ClientesT clienteTSeleccionado;

    /**
     * Get the value of clienteTSeleccionado
     *
     * @return the value of clienteTSeleccionado
     */
    public ClientesT getClienteTSeleccionado() {
        return clienteTSeleccionado;
    }

    /**
     * Set the value of clienteTSeleccionado
     *
     * @param clienteTSeleccionado new value of clienteTSeleccionado
     */
    public void setClienteTSeleccionado(ClientesT clienteTSeleccionado) {
        ClientesT oldClienteTSeleccionado = this.clienteTSeleccionado;
        this.clienteTSeleccionado = clienteTSeleccionado;
        propertyChangeSupport.firePropertyChange("clienteTSeleccionado", oldClienteTSeleccionado, clienteTSeleccionado);
    }
    private PropertyChangeSupport propertyChangeSupport = new PropertyChangeSupport(this);

    /**
     * Add PropertyChangeListener.
     *
     * @param listener
     */
    @Override
    public void addPropertyChangeListener(PropertyChangeListener listener) {
        propertyChangeSupport.addPropertyChangeListener(listener);
    }

    /**
     * Remove PropertyChangeListener.
     *
     * @param listener
     */
    @Override
    public void removePropertyChangeListener(PropertyChangeListener listener) {
        propertyChangeSupport.removePropertyChangeListener(listener);
    }

    public void limpiar() {
        idClienteTextField.setText("");
        nombresTextField.setText("");
        cuitTextField.setText("");
        aceptarButton.setEnabled(false);
        setClienteTSeleccionado(null);
        if (clientesTs != null) {
            Binding b = LOVHelper.findBinding(bindingGroup, clientesTs, clientesTable);
            b.unbind();

            clientesTs.clear();

            b.bind();

            clientesTable.repaint();
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        clientesTs = new java.util.ArrayList<ar.com.jpack.transferencia.ClientesT>();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        idClienteTextField = new javax.swing.JTextField();
        nombresTextField = new javax.swing.JTextField();
        cuitTextField = new javax.swing.JTextField();
        buscarButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        clientesTable = new javax.swing.JTable();
        cancelarButton = new javax.swing.JButton();
        aceptarButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(ar.com.jpack.desktop.DesktopApp.class).getContext().getResourceMap(Clientes.class);
        setTitle(resourceMap.getString("Clientes.title")); // NOI18N
        setName("Clientes"); // NOI18N
        setResizable(false);

        jLabel1.setText(resourceMap.getString("jLabel1.text")); // NOI18N
        jLabel1.setName("jLabel1"); // NOI18N

        jLabel2.setText(resourceMap.getString("jLabel2.text")); // NOI18N
        jLabel2.setName("jLabel2"); // NOI18N

        jLabel3.setText(resourceMap.getString("jLabel3.text")); // NOI18N
        jLabel3.setName("jLabel3"); // NOI18N

        idClienteTextField.setName("idClienteTextField"); // NOI18N

        nombresTextField.setName("nombresTextField"); // NOI18N

        cuitTextField.setName("cuitTextField"); // NOI18N

        javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance(ar.com.jpack.desktop.DesktopApp.class).getContext().getActionMap(Clientes.class, this);
        buscarButton.setAction(actionMap.get("buscarClientes")); // NOI18N
        buscarButton.setName("buscarButton"); // NOI18N

        jScrollPane1.setName("jScrollPane1"); // NOI18N

        clientesTable.setName("clientesTable"); // NOI18N

        org.jdesktop.swingbinding.JTableBinding jTableBinding = org.jdesktop.swingbinding.SwingBindings.createJTableBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, clientesTs, clientesTable);
        org.jdesktop.swingbinding.JTableBinding.ColumnBinding columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${idCliente}"));
        columnBinding.setColumnName("Id Cliente");
        columnBinding.setColumnClass(Integer.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${nombres}"));
        columnBinding.setColumnName("Nombres");
        columnBinding.setColumnClass(String.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${cuit}"));
        columnBinding.setColumnName("Cuit");
        columnBinding.setColumnClass(String.class);
        columnBinding.setEditable(false);
        bindingGroup.addBinding(jTableBinding);
        jTableBinding.bind();
        jScrollPane1.setViewportView(clientesTable);
        clientesTable.getColumnModel().getColumn(0).setHeaderValue(resourceMap.getString("clientesTable.columnModel.title0")); // NOI18N
        clientesTable.getColumnModel().getColumn(1).setHeaderValue(resourceMap.getString("clientesTable.columnModel.title1")); // NOI18N
        clientesTable.getColumnModel().getColumn(2).setHeaderValue(resourceMap.getString("clientesTable.columnModel.title2")); // NOI18N

        cancelarButton.setAction(actionMap.get("cancelar")); // NOI18N
        cancelarButton.setName("cancelarButton"); // NOI18N

        aceptarButton.setAction(actionMap.get("seleccionarCliente")); // NOI18N
        aceptarButton.setName("aceptarButton"); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(nombresTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 340, Short.MAX_VALUE)
                            .addComponent(cuitTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 340, Short.MAX_VALUE)
                            .addComponent(idClienteTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 340, Short.MAX_VALUE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap(337, Short.MAX_VALUE)
                        .addComponent(buscarButton))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(13, 13, 13)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 389, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap(246, Short.MAX_VALUE)
                        .addComponent(aceptarButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cancelarButton)))
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {aceptarButton, cancelarButton});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(idClienteTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(nombresTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(cuitTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(buscarButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cancelarButton)
                    .addComponent(aceptarButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        bindingGroup.bind();

        pack();
    }// </editor-fold>//GEN-END:initComponents


    @Action
    public Task buscarClientes() {
        return new BuscarClientesTask(DesktopApp.getApplication(),"Busqueda Iniciada");
    }

    private class BuscarClientesTask extends org.jdesktop.application.Task<String, Void> {
        DesktopView view;
        String mensaje;
        BuscarClientesTask(DesktopApp app, String mensaje) {
            super(app);
            this.view = app.getDesktopView();
            this.mensaje=mensaje;
        }
        @Override protected String doInBackground() {              
            view.setStatusMessage(mensaje);
            if(clientesTs==null){ 
                clientesTs = new ArrayList<ClientesT>();
            }
            
            Binding b = LOVHelper.findBinding(bindingGroup, clientesTs, clientesTable);
            b.unbind();

            clientesTs.clear();

            HashMap parametros = new HashMap();
            if (!idClienteTextField.getText().isEmpty()) {
                try{
                    parametros.put("pIdCliente", Integer.parseInt(idClienteTextField.getText()));
                }catch(NumberFormatException ex){
                    JOptionPane.showMessageDialog(rootPane, "El campo id cliente debe ser numerico, se omitira en la busqueda");
                    idClienteTextField.setText("");
                }
            }
            if (!nombresTextField.getText().isEmpty()) {
                parametros.put("pNombres", nombresTextField.getText().toUpperCase());
            }
            if (!cuitTextField.getText().isEmpty()) {
                parametros.put("pCuit", cuitTextField.getText().toUpperCase());
            }
            clientesTs.addAll((ArrayList<ClientesT>)DesktopApp.getApplication().getClientes(parametros));

            b.bind();

            clientesTable.repaint();
            
            int total = clientesTs.size();
            if (total > 1) {
                mensaje = total + " registros encontrados";
            } else if (total == 1) {
                mensaje = total + " registro encontrado";
            } else {
                mensaje = "No se encontraron registros";
            }
            return mensaje;
    }
        @Override protected void succeeded(String result) {
            super.succeeded(result);
            view.setStatusMessage(result);
        }
    }
    
   

    @Action
    public void seleccionarCliente() {
        setClienteTSeleccionado(clientesTs.get(clientesTable.getSelectedRow()));
        setVisible(false);
    }

    @Action
    public void cancelar() {
        setClienteTSeleccionado(null);
        setVisible(false);
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton aceptarButton;
    private javax.swing.JButton buscarButton;
    private javax.swing.JButton cancelarButton;
    private javax.swing.JTable clientesTable;
    private java.util.ArrayList<ar.com.jpack.transferencia.ClientesT> clientesTs;
    private javax.swing.JTextField cuitTextField;
    private javax.swing.JTextField idClienteTextField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField nombresTextField;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables

}
